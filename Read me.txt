===============================================================================================================
使用方法：
1、打开浏览器扩展（如Chrome可直接在地址栏输入：chrome://extensions）
2、勾选开发者模式
3、将“阿布反调试工具” 整个文件夹拖拽到浏览器即可加载成功。
4、点击右上角插件栏，选择自己需要的功能。
===============================================================================================================

更新于 2020-5-14 By 阿布。
===============================================================================================================
What's new?
1：更新了stringify的逻辑，由于stringify的调用太频繁，如果每次都断住，这样很不合理，于是判断增加关键字，
比如关键字为  abcde，那么当被转换对象其中内容包含abcde的时候，才会断住。如果不包含，就正常输入被调用，不会断住。

===============================================================================================================


更新于 2020-5-14 By 阿布。
===============================================================================================================
What's new?
1 ：勾选 hook debugger 后 ,可打开F12之后 按Alt+Shift+D来呼出Attach 来解决所有常量debugger。
解决：
直接写在js里的debugger常量无法hook（其实也行，但是我不知道怎么写在扩展里） --》 现在知道咋写进去了 - - 。
===============================================================================================================


更新于 2020-5-13 By 阿布。

主要解决问题..
1、基于console的devtool检测
有些网站会用console来检测是否打开了F12（开发者工具），所以直接hook console 对象 让所有输出失效，已达到过检测的目的。

2、基于pushState的卡浏览器
有些网站会不停的往Chrome缓存里塞东西（多见于sojson和一些仿sojson的网站），已干掉。

3、基于debugger的卡浏览器 检测devtool
动态debugger hook 了 Function.protype.constructor 替换所有的debugger 字符（直接写在js里的debugger常量无法hook（其实也行，但是我不知道怎么写在扩展里），只能自己右键，下一个条件断点过掉。）

4、基于regexp的代码风格检测
用正则检测代码是否格式化，直接干掉。

5、基于sojson的反调试 
对于sojsonV5，一键过所有反调试。

6、基于setInterval的反调试
hook setInterval，使其无法生效，但保留原有特征（无法被检测到是否被hook了，且当有函数检测时会提示。）

7、基于cookies的加密定位
大家都懂的。。

8、基于stringify的hook
大家都懂的，实在找不到入口的时候，可以碰碰运气，一般在密码算法或特殊加密前，都会把明文对象通过stringify转为字符串。

9、基于懒，所以会不断完善。。。

